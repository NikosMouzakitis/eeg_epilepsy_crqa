import pandas as pd
import matplotlib.pyplot as plt
'''
File used to read CSV (generated by #1 script)
and plot result metrics for the tested given filters.
'''
# === Load metrics ===
df = pd.read_csv("eeg_metrics_results.csv")

# === Metrics and optimization direction ===
metrics_list = ['SNR (dB)', 'RMSE (μV)', 'NRMSE (%)', 'Correlation', 'PRD (%)']
better_high = {
    'SNR (dB)': True,
    'Correlation': True,
    'RMSE (μV)': False,
    'NRMSE (%)': False,
    'PRD (%)': False
}

# === Number of top filters to show ===
TOP_N = 10

# === Plot settings ===
fig, axes = plt.subplots(2, 3, figsize=(18, 10))
axes = axes.flatten()

for idx, metric in enumerate(metrics_list):
    ax = axes[idx]
    
    # Average scores across all files/channels for each filter
    avg_scores = df.groupby("Filter")[metric].mean()
    
    # Special handling for RMSE scaling
    if metric == 'RMSE (μV)':
        avg_scores = avg_scores * 1000  # scale to make visible on plot
    
    # Sort by desired direction
    avg_scores = avg_scores.sort_values(ascending=not better_high[metric])
    
    # Top N
    top_scores = avg_scores.head(TOP_N)
    
    # Bar plot
    colors = plt.cm.tab10.colors
    top_scores.plot(kind='barh', ax=ax, color=colors[idx % len(colors)], edgecolor='black')
    
    ax.set_title(f"Top {TOP_N} Filters by {metric}", fontsize=12)
    ax.set_xlabel(metric + (" × 1000" if metric == 'RMSE (μV)' else ""))
    ax.invert_yaxis()  # Highest score at top
    
    # Show value labels
    for i, v in enumerate(top_scores):
        ax.text(v, i, f"{v:.4f}", va='center', ha='left', fontsize=9)

# Hide unused subplot if any
if len(metrics_list) < len(axes):
    for j in range(len(metrics_list), len(axes)):
        fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

